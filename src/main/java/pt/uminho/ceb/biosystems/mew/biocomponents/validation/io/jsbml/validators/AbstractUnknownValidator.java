package pt.uminho.ceb.biosystems.mew.biocomponents.validation.io.jsbml.validators;

import java.util.HashSet;
import java.util.Set;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public abstract class AbstractUnknownValidator implements ElementValidator{

	public abstract String getAtributeId();
	public abstract String getElementName();
	public abstract String getDependentAttribute();
	public abstract String getDependentAttributeId();
	public abstract String getDependentNode();
	
	private String NEW_ELEMENT_SUFIX = "_AUTOGENERATED";
	
	private Set<String> allDependenciesList;
	private Document document;
	protected Set<Element> allUnknownElements;
	
	public AbstractUnknownValidator(Document document) {
		this.document = document;
		this.allUnknownElements = new HashSet<Element>();
	}
	
	@Override
	public boolean isValid(Element elem) {
		return getAllDependenciesList().contains(elem.getAttribute(getAtributeId()));
	}
	
	@Override
	public String reason(Element elem) {
		if(!isValid(elem))
		{
			allUnknownElements.add(elem);
			return "Attribute ["+ elem.getAttribute(getAtributeId()) +"] in '" + ((Element) elem.getParentNode().getParentNode()).getAttribute("id") + "' is unknow";
		}
		
		return "No problem with element " + elem.getAttribute(getAtributeId());
	}
	
	public String solveProblem(Document methodDoc, Element elem) throws JSBMLValidatorException{
		Element rootElement = methodDoc.getDocumentElement();
		Element modelElement = (Element) rootElement.getElementsByTagName("model").item(0);
		
		Element listDependentElement = (Element) modelElement.getElementsByTagName(getDependentNode()).item(0);

		Element element = (Element) listDependentElement.appendChild(methodDoc.createElement(getDependentAttribute()));
		element.setAttribute("id", elem.getAttribute(getAtributeId()));
		element.setAttribute("name", elem.getAttribute(getAtributeId()) + NEW_ELEMENT_SUFIX);
		listDependentElement.appendChild(element);
		return "Added [" + elem.getAttribute(getAtributeId())+ "] in " + getDependentAttribute() + " node";
	}
	
	@Override
	public boolean canBeSolved(Element elem) {
		return true;
	}
	
	public Set<String> getAllDependenciesList() {
		
		if(allDependenciesList==null){
			allDependenciesList = new HashSet<String>();
			
			NodeList nlElement = document.getElementsByTagName(getDependentAttribute());
						
			int imax = nlElement.getLength();
			for (int i = 0; i < imax; i++) {
				if (nlElement.item(i).getNodeType() == Node.ELEMENT_NODE) {
					Element elem = (Element) nlElement.item(i);
					allDependenciesList.add(elem.getAttribute(getDependentAttributeId()));
				}
			}
		}
		return allDependenciesList;
	}
}
